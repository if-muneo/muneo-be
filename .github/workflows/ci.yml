# .github/workflows/ci.yml
name: Spring Boot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 테스트 실행
    
    steps:
    - name: 📂 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: ☕ Java 17 설정
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: 🐘 Gradle 캐시 설정
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: 🔧 실행 권한 부여
      run: chmod +x ./gradlew
    
    - name: 🧪 테스트 실행
      run: ./gradlew test
    
    - name: 📊 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: build/reports/tests/test/

  build:
    runs-on: ubuntu-latest
    needs: test
    name: 🏗️ 빌드 및 Docker 이미지 생성
    
    steps:
    - name: 📂 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: ☕ Java 17 설정
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: 🐘 Gradle 캐시 설정
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: 🔧 실행 권한 부여
      run: chmod +x ./gradlew
    
    - name: 🏗️ JAR 파일 빌드
      run: ./gradlew build -x test
    
    - name: 📦 빌드 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: build/libs/*.jar

  jira-integration:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: 📋 Jira 연동
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
    - name: 🎯 Jira 이슈 번호 추출
      id: jira
      run: |
        ISSUE=$(echo "${{ github.event.pull_request.title }}" | grep -o 'MUN-[0-9]\+' || echo "")
        echo "issue=$ISSUE" >> $GITHUB_OUTPUT
        echo "추출된 이슈: $ISSUE"
    
    - name: 📋 Jira 상태 업데이트
      if: steps.jira.outputs.issue != ''
      uses: atlassian/gajira-transition@v3
      with:
        issue: ${{ steps.jira.outputs.issue }}
        transition: "완료"
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

# 추후 배포 단계 (주석 처리)
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   name: 🚀 배포
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: 🚀 배포 실행
  #     run: echo "배포 단계는 다음에 설정해요!"
