name: Spring Boot CI/CD (ECS Blue/Green)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 테스트 실행

    steps:
      - name: 📂 코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🐘 Gradle 캐시 설정
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 🧪 테스트 실행
        run: ./gradlew test

  build:
    runs-on: ubuntu-latest
    needs: test
    name: 🏗️ JAR 빌드 및 아티팩트 저장

    steps:
      - name: 📂 코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔧 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 🏗️ JAR 빌드
        run: ./gradlew bootJar

      - name: 📦 JAR 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: 🚀 ECS Blue/Green 배포
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: 📂 코드 체크아웃
        uses: actions/checkout@v4

      - name: 📦 JAR 다운로드
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: 🔑 AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: 📝 task-def.json & appspec.yaml 생성
        run: |
          # JAR 복사 (현재는 사용하지 않지만 유지)
          JAR_FILE=$(ls build/libs/*.jar | head -1)
          cp "$JAR_FILE" app-latest.jar
      
          # task-def.json 생성
          cat > task-def.json <<EOF
          {
            "family": "sample-fargate",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "sample-app",
                "image": "public.ecr.aws/docker/library/httpd:latest",
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80,
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "entryPoint": ["sh", "-c"],
                "command": [
                  "echo '<html><body style=\"background-color: #097969\">Deployed via GitHub Actions</body></html>' > /usr/local/apache2/htdocs/index.html && httpd-foreground"
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::904233103291:role/ecsTaskExecutionRole"
          }
          EOF

          # 🔁 task definition 등록하고 정확한 ARN 추출
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
      
          echo "✅ TASK DEF ARN: $TASK_DEF_ARN"

          # appspec.yaml 생성 (정확한 ARN 사용!)
          cat > appspec.yaml <<EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$TASK_DEF_ARN"
                  LoadBalancerInfo:
                    ContainerName: "sample-app"
                    ContainerPort: 80
                  PlatformVersion: "LATEST"
          EOF

      - name: ☁️ S3에 배포파일 업로드
        run: |
          aws s3 cp appspec.yaml s3://muneo-s3/appspec.yaml
      
      - name: 🚀 CodeDeploy로 ECS 배포 실행
        run: |
          aws deploy create-deployment \
          --application-name tutorial-bluegreen-app \
          --deployment-group-name tutorial-bluegreen-dg \
          --revision '{"revisionType":"S3","s3Location":{"bucket":"muneo-s3","key":"appspec.yaml","bundleType":"YAML"}}'

      - name: ⏱️ 배포 완료될 때까지 대기
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name tutorial-bluegreen-app \
            --deployment-group-name tutorial-bluegreen-dg \
            --query "deployments[0]" --output text)

          echo "Waiting for deployment $DEPLOYMENT_ID..."
          aws deploy wait deployment-successful --deployment-id "$DEPLOYMENT_ID"
